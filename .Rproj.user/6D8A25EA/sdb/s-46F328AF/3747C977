{
    "collab_server" : "",
    "contents" : "\"linear\" <- function(fixed = c(NA, NA), names = c(\"a\", \"b\"))\n{\n    ## Checking arguments\n    numParm <- 2\n    if (!is.character(names) | !(length(names) == numParm))\n      {stop(\"Not correct 'names' argument\")}\n    if (!(length(fixed) == numParm))\n      {stop(\"Not correct 'fixed' argument\")}\n\n    ## Fixing parameters (using argument 'fixed')\n    notFixed <- is.na(fixed)\n    parmVec <- rep(0, numParm)\n    parmVec[!notFixed] <- fixed[!notFixed]\n\n    ## Defining the non-linear function\n    fct <- function(x, parm)\n    {\n        parmMat <- matrix(parmVec, nrow(parm), numParm, byrow = TRUE)\n        parmMat[, notFixed] <- parm\n\n        a <- parmMat[, 1]; b <- parmMat[, 2]\n        a + b * x\n    }\n\n    ## Defining self starter function\n    ssfct <- function(dataf)\n    {\n        x <- dataf[, 1]\n        y <- dataf[, 2]\n\n        #regression on pseudo y values\n        pseudoY <- y\n        pseudoX <- x\n        coefs <- coef( lm(pseudoY ~ pseudoX) )\n        a <- coefs[1]\n\n        b <- coefs[2]\n\n        return(c(a, b)[notFixed])\n    }\n\n    ## Defining names\n    pnames <- names[notFixed]\n\n    ## Defining derivatives\n\n    ## Defining the ED function\n\n    ## Defining the inverse function\n\n    ## Defining descriptive text\n    text <- \"Straight line\"\n\n    ## Returning the function with self starter and names\n    returnList <- list(fct = fct, ssfct = ssfct, names = pnames, text = text, noParm = sum(is.na(fixed)))\n\n    class(returnList) <- \"drcMean\"\n    invisible(returnList)\n}\n\n\"parabolic\" <- function(fixed = c(NA, NA, NA), names = c(\"a\", \"b\", \"c\"))\n{\n  ## Checking arguments\n  numParm <- 3\n  if (!is.character(names) | !(length(names) == numParm)) {stop(\"Not correct 'names' argument\")}\n  if (!(length(fixed) == numParm)) {stop(\"Not correct 'fixed' argument\")}\n\n  ## Fixing parameters (using argument 'fixed')\n  notFixed <- is.na(fixed)\n  parmVec <- rep(0, numParm)\n  parmVec[!notFixed] <- fixed[!notFixed]\n\n  ## Defining the non-linear function\n  fct <- function(x, parm)\n  {\n    parmMat <- matrix(parmVec, nrow(parm), numParm, byrow = TRUE)\n    parmMat[, notFixed] <- parm\n\n    a <- parmMat[, 1]; b <- parmMat[, 2]; c <- parmMat[, 3]\n    a + b * x + c * (x^2)\n  }\n\n  ## Defining self starter function\n  ssfct <- function(dataf)\n  {\n    x <- dataf[, 1]\n    y <- dataf[, 2]\n\n    #regression on pseudo y values\n    pseudoY <- y\n    pseudoX <- x\n    coefs <- coef( lm(pseudoY ~ pseudoX + I(pseudoX^2)) )\n    a <- coefs[1]\n    b <- coefs[2]\n    c <- coefs[3]\n\n    return(c(a, b, c)[notFixed])\n  }\n\n  ## Defining names\n  pnames <- names[notFixed]\n\n  ## Defining derivatives\n\n  ## Defining the ED function\n\n  ## Defining the inverse function\n\n  ## Defining descriptive text\n  text <- \"Second Order Polynomial\"\n\n  ## Returning the function with self starter and names\n  returnList <- list(fct = fct, ssfct = ssfct, names = pnames, text = text, noParm = sum(is.na(fixed)))\n\n  class(returnList) <- \"drcMean\"\n  invisible(returnList)\n}\n\n\"firstOrder\" <-\nfunction(fixed = c(NA, NA), names = c(\"init\", \"k\"))\n{\n    ## Checking arguments\n    numParm <- 2\n    if (!is.character(names) | !(length(names) == numParm)) {stop(\"Not correct 'names' argument\")}\n    if (!(length(fixed) == numParm)) {stop(\"Not correct 'fixed' argument\")}\n\n    ## Fixing parameters (using argument 'fixed')\n    notFixed <- is.na(fixed)\n    parmVec <- rep(0, numParm)\n    parmVec[!notFixed] <- fixed[!notFixed]\n\n    ## Defining the non-linear function\n    fct <- function(x, parm)\n    {\n        parmMat <- matrix(parmVec, nrow(parm), numParm, byrow = TRUE)\n        parmMat[, notFixed] <- parm\n\n        init <- parmMat[, 1]; k <- parmMat[, 2]\n        init * exp ( - k * x )\n    }\n\n    ## Defining self starter function\n    ssfct <- function(dataf)\n    {\n        x <- dataf[, 1]\n        y <- dataf[, 2]\n\n        ## Linear regression on pseudo y values\n        pseudoY <- log( y + 0.000001)\n        coefs <- coef( lm(pseudoY ~ x) )\n        init <- exp(coefs[1])\n        m <- - coefs[2]\n\n        return(c(init, m)[notFixed])\n    }\n\n    ## Defining names\n    pnames <- names[notFixed]\n\n    ## Defining derivatives\n\n    ## Defining the ED function\n\n    ## Defining the inverse function\n\n    ## Defining descriptive text\n    text <- \"Exponential Decay Model\"\n\n    ## Returning the function with self starter and names\n    returnList <- list(fct = fct, ssfct = ssfct, names = pnames, text = text, noParm = sum(is.na(fixed)))\n\n    class(returnList) <- \"drcMean\"\n    invisible(returnList)\n}\n\n\"cousens85\" <-\n  function(fixed = c(NA, NA, NA), names = c(\"YWF\", \"i\", \"a\"))\n  {\n    ## Checking arguments\n    numParm <- 3\n    if (!is.character(names) | !(length(names) == numParm)) {stop(\"Not correct 'names' argument\")}\n    if (!(length(fixed) == numParm)) {stop(\"Not correct 'fixed' argument\")}\n\n    ## Fixing parameters (using argument 'fixed')\n    notFixed <- is.na(fixed)\n    parmVec <- rep(0, numParm)\n    parmVec[!notFixed] <- fixed[!notFixed]\n\n    ## Defining the non-linear function\n    fct <- function(x, parm)\n    {\n      parmMat <- matrix(parmVec, nrow(parm), numParm, byrow = TRUE)\n      parmMat[, notFixed] <- parm\n\n      YWF <- parmMat[, 1]; i <- parmMat[, 2]; a <- parmMat[, 3]\n      YWF*(1 - (i*x) / (100 * (1 + i * x/a)))\n    }\n\n    ## Defining self starter function\n    ssfct <- function(dataf)\n    {\n      x <- dataf[, 1]\n      y <- dataf[, 2]\n\n      YWF <- max(y)+10e-06\n      YL <- (1 - y/YWF)*100\n      #regression on pseudo y values\n      pseudoY <- 1 /  (YL + 0.000001)\n      pseudoX <- 1 / (x + 0.00001)\n      coefs <- coef( lm(pseudoY ~ pseudoX) )\n      a <- 1 / coefs[1]; i <- 1 / coefs[2]\n\n      return(c(YWF, i, a)[notFixed])\n    }\n\n    ## Defining names\n    pnames <- names[notFixed]\n\n    ## Defining derivatives\n\n    ## Defining the ED function\n\n    ## Defining the inverse function\n\n    ## Defining descriptive text\n    text <- \"Yield-Weed Density function (Cousens, 1985)\"\n\n    ## Returning the function with self starter and names\n    returnList <- list(fct = fct, ssfct = ssfct, names = pnames, text = text, noParm = sum(is.na(fixed)))\n\n    class(returnList) <- \"drcMean\"\n    invisible(returnList)\n}\n\n\n",
    "created" : 1527436201411.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2985855795",
    "id" : "3747C977",
    "lastKnownWriteTime" : 1519317371,
    "last_content_update" : 1519317371,
    "path" : "~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/statBook/R/SelfStartDrc.r",
    "project_path" : null,
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}