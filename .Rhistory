data=dataset)
summary(modGR50Ex5)
coefs <- as.numeric( coef(modGR50Ex5) )
#Predicting the germination rate for a given g and Temp
#Constant daily temperature
GRTg.Exb <- function(Temp, g, Tb, ThetaT0, b1, k, Tc0, b2){
ThetaTg <- ThetaT0 + b1 * g
Tcg <- Tc0 + b2 * g
GRTg <- ((Temp - Tb)/ThetaTg) * ((1 - exp(k * (Temp - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
return(ifelse(GRTg < 0, 0, GRTg))
}
#Predicting the germination rate for a given g and Temp
#Fluctuating daily temperature
GRTgf.Exb <- function(Temp1, Temp2, g, Tb, ThetaT0, b1, k, Tc0, b2){
ThetaTg <- ThetaT0 + b1 * g
Tcg <- Tc0 + b2 * g
GRTgd <- ((Temp1 - Tb)/ThetaTg) * ((1 - exp(k * (Temp1 - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
GRTgn <- ((Temp2 - Tb)/ThetaTg) * ((1 - exp(k * (Temp2 - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
GRTgd <- ifelse(GRTgd < 0, 0, GRTgd)
GRTgn <- ifelse(GRTgn < 0, 0, GRTgn)
GRTg <- 0.5 * GRTgd + 0.5 * GRTgn
return(GRTg)
}
#Predicting thermal-time to a give fraction g
TTg <- function(g, ThetaT0, b1){
ThetaT0 + b1 * g}
#Predicting the daily accumulation of thermal time, depending
#on Temp and g
TTdaily.Exb <- function(Temp, g, Tb, b1, k, Tc0, b2){
Tcg <- Tc0 + b2 * g
TTg <- (Temp - Tb) * ((1 - exp(k * (Temp - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
return(ifelse(TTg < 0, 0, TTg))
}
#Predicting the daily accumulation of thermal time, depending
#on Temp and g, with fluctuating temperature
TTdailyf.Exb <- function(Temp1, Temp2, g, Tb, b1, k, Tc0, b2){
Tcg <- Tc0 + b2 * g
TTg1 <- (Temp1 - Tb) * ((1 - exp(k * (Temp1 - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
TTg2 <- (Temp2 - Tb) * ((1 - exp(k * (Temp2 - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
TTg1 <- ifelse(TTg1 < 0, 0, TTg1)
TTg2 <- ifelse(TTg2 < 0, 0, TTg2)
TTg <- 0.5 * TTg1 + 0.5 * TTg2
return(TTg)
}
#Grafico tempi di germinazione osservati e attesi
dataset <- read.csv("GermTimeNew.csv", header=T)
head(dataset)
datasetT <- subset(dataset, TypeT == "fix" & Light == "SI")
g10 <- 1/GRTg.Exb(datasetT$Temp, 10, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g20 <- 1/GRTg.Exb(datasetT$Temp, 20, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g30 <- 1/GRTg.Exb(datasetT$Temp, 30, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g40 <- 1/GRTg.Exb(datasetT$Temp, 40, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g50 <- 1/GRTg.Exb(datasetT$Temp, 50, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
par(mfrow=c(1,3))
plot(g10 ~ datasetT$X10., xlim = c(1,8), ylim = c(1,8), pch=1,
xlab = "Observed", ylab = "Expected", main = "Fluctuating temperature - L/D", cex=1.2,
cex.axis=1.2, cex.lab=1.5)
points(g20 ~ datasetT$X20., pch=2)
points(g30 ~ datasetT$X30., pch=3)
points(g40 ~ datasetT$X40., pch=4)
points(g50 ~ datasetT$X50., pch=5)
abline(a =0, b=1)
datasetT <- subset(dataset, TypeT == "alt")
g10 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 10, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g20 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 20, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g30 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 30, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g40 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 40, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g50 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 50, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
plot(g10 ~ datasetT$X10., xlim = c(1,8), ylim = c(1,8), pch=1,
xlab = "Observed", ylab = "Expected", main = "Fluctuating temperature - L/D", cex=1.2,
cex.axis=1.2, cex.lab=1.5)
points(g20 ~ datasetT$X20., pch=2)
points(g30 ~ datasetT$X30., pch=3)
points(g40 ~ datasetT$X40., pch=4)
points(g50 ~ datasetT$X50., pch=5)
abline(a =0, b=1)
datasetT <- subset(dataset, Light == "NO")
g10 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 10, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g20 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 20, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g30 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 30, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g40 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 40, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g50 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 50, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
plot(g10 ~ datasetT$X10., xlim = c(1,8), ylim = c(1,8), pch=1,
xlab = "Observed", ylab = "Expected", main = "Fluctuating temperature - L/D", cex=1.2,
cex.axis=1.2, cex.lab=1.5)
points(g20 ~ datasetT$X20., pch=2)
points(g30 ~ datasetT$X30., pch=3)
points(g40 ~ datasetT$X40., pch=4)
points(g50 ~ datasetT$X50., pch=5)
abline(a =0, b=1)
#PREDICTIONS ####################################################
rm(list=ls())
library(drcSeedGerm)
library(lattice)
library(aomisc)
dataset <- read.csv("GRnlinLong.csv", header=T)
head(dataset)
dataset$TempF <- factor(dataset$Temp)
dataset$PercF <- factor(dataset$g)
xyplot(GR ~ Temp|PercF, data = dataset)
modGR50Ex5 <- drm(GR ~ Temp, fct=GRT.Exb(), curveid = PercF,
pmodels=list(~1, ~g, ~1, ~g),
data=dataset)
summary(modGR50Ex5)
coefs <- as.numeric( coef(modGR50Ex5) )
#Predicting the germination rate for a given g and Temp
#Constant daily temperature
GRTg.Exb <- function(Temp, g, Tb, ThetaT0, b1, k, Tc0, b2){
ThetaTg <- ThetaT0 + b1 * g
Tcg <- Tc0 + b2 * g
GRTg <- ((Temp - Tb)/ThetaTg) * ((1 - exp(k * (Temp - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
return(ifelse(GRTg < 0, 0, GRTg))
}
#Predicting the germination rate for a given g and Temp
#Fluctuating daily temperature
GRTgf.Exb <- function(Temp1, Temp2, g, Tb, ThetaT0, b1, k, Tc0, b2){
ThetaTg <- ThetaT0 + b1 * g
Tcg <- Tc0 + b2 * g
GRTgd <- ((Temp1 - Tb)/ThetaTg) * ((1 - exp(k * (Temp1 - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
GRTgn <- ((Temp2 - Tb)/ThetaTg) * ((1 - exp(k * (Temp2 - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
GRTgd <- ifelse(GRTgd < 0, 0, GRTgd)
GRTgn <- ifelse(GRTgn < 0, 0, GRTgn)
GRTg <- 0.5 * GRTgd + 0.5 * GRTgn
return(GRTg)
}
#Predicting thermal-time to a give fraction g
TTg <- function(g, ThetaT0, b1){
ThetaT0 + b1 * g}
#Predicting the daily accumulation of thermal time, depending
#on Temp and g
TTdaily.Exb <- function(Temp, g, Tb, b1, k, Tc0, b2){
Tcg <- Tc0 + b2 * g
TTg <- (Temp - Tb) * ((1 - exp(k * (Temp - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
return(ifelse(TTg < 0, 0, TTg))
}
#Predicting the daily accumulation of thermal time, depending
#on Temp and g, with fluctuating temperature
TTdailyf.Exb <- function(Temp1, Temp2, g, Tb, b1, k, Tc0, b2){
Tcg <- Tc0 + b2 * g
TTg1 <- (Temp1 - Tb) * ((1 - exp(k * (Temp1 - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
TTg2 <- (Temp2 - Tb) * ((1 - exp(k * (Temp2 - Tcg)))/(1 -
exp(k * (Tb - Tcg))))
TTg1 <- ifelse(TTg1 < 0, 0, TTg1)
TTg2 <- ifelse(TTg2 < 0, 0, TTg2)
TTg <- 0.5 * TTg1 + 0.5 * TTg2
return(TTg)
}
#Grafico tempi di germinazione osservati e attesi
dataset <- read.csv("GermTimeNew.csv", header=T)
head(dataset)
datasetT <- subset(dataset, TypeT == "fix" & Light == "SI")
g10 <- 1/GRTg.Exb(datasetT$Temp, 10, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g20 <- 1/GRTg.Exb(datasetT$Temp, 20, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g30 <- 1/GRTg.Exb(datasetT$Temp, 30, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g40 <- 1/GRTg.Exb(datasetT$Temp, 40, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g50 <- 1/GRTg.Exb(datasetT$Temp, 50, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
par(mfrow=c(1,3))
plot(g10 ~ datasetT$X10., xlim = c(1,8), ylim = c(1,8), pch=1,
xlab = "Observed", ylab = "Expected", main = "Constant temperature - L/D", cex=1.2,
cex.axis=1.2, cex.lab=1.5)
points(g20 ~ datasetT$X20., pch=2)
points(g30 ~ datasetT$X30., pch=3)
points(g40 ~ datasetT$X40., pch=4)
points(g50 ~ datasetT$X50., pch=5)
abline(a =0, b=1)
datasetT <- subset(dataset, TypeT == "alt")
g10 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 10, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g20 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 20, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g30 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 30, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g40 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 40, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g50 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 50, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
plot(g10 ~ datasetT$X10., xlim = c(1,8), ylim = c(1,8), pch=1,
xlab = "Observed", ylab = "Expected", main = "Fluctuating temperature - L/D", cex=1.2,
cex.axis=1.2, cex.lab=1.5)
points(g20 ~ datasetT$X20., pch=2)
points(g30 ~ datasetT$X30., pch=3)
points(g40 ~ datasetT$X40., pch=4)
points(g50 ~ datasetT$X50., pch=5)
abline(a =0, b=1)
datasetT <- subset(dataset, Light == "NO")
g10 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 10, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g20 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 20, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g30 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 30, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g40 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 40, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
g50 <- 1/GRTgf.Exb(datasetT$Temp, datasetT$Temp2, 50, coefs[1], coefs[2], coefs[3], coefs[4], coefs[5], coefs[6])
plot(g10 ~ datasetT$X10., xlim = c(1,8), ylim = c(1,8), pch=1,
xlab = "Observed", ylab = "Expected", main = "Constant temperature - D", cex=1.2,
cex.axis=1.2, cex.lab=1.5)
points(g20 ~ datasetT$X20., pch=2)
points(g30 ~ datasetT$X30., pch=3)
points(g40 ~ datasetT$X40., pch=4)
points(g50 ~ datasetT$X50., pch=5)
abline(a =0, b=1)
EnvVarMod <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Block - 1),
pdSymm(~Genotype - 1)))),
data=WinterWheat)
model.lm <- lm(Yield ~ Genotype*Year + Year/Block,
data=WinterWheat)
rm(list=ls())
# library(devtools)
# install_github("OnofriAndreaPG/aomisc")
library(aomisc)
library(nlme)
data("WinterWheat")
WinterWheat <- WinterWheat[WinterWheat$Genotype == "COLOSSEO" | WinterWheat$Genotype == "CRESO" | WinterWheat$Genotype == "DUILIO",]
head(WinterWheat)
WinterWheat$Genotype <- factor(WinterWheat$Genotype)
WinterWheat$Block <- factor(WinterWheat$Block)
WinterWheat$Year <- factor(WinterWheat$Year)
model.lm <- lm(Yield ~ Genotype*Year + Year/Block,
data=WinterWheat)
anova(model.lm)
model.lm2 <- lm(Yield ~ Genotype + Genotype:Year + Year:Block,
data=WinterWheat)
anova(model.lm2)
model.lm2 <- lm(Yield ~ Genotype + Year:Block + Genotype:Year,
data=WinterWheat)
anova(model.lm2)
rm(list=ls())
# library(devtools)
# install_github("OnofriAndreaPG/aomisc")
library(aomisc)
library(nlme)
data("WinterWheat")
head(WinterWheat)
WinterWheat$Genotype <- factor(WinterWheat$Genotype)
WinterWheat$Block <- factor(WinterWheat$Block)
WinterWheat$Year <- factor(WinterWheat$Year)
model.lm <- lm(Yield ~ Genotype*Year + Year/Block,
data=WinterWheat)
anova(model.lm)
model.lm2 <- lm(Yield ~ Genotype + Year:Block + Genotype:Year,
data=WinterWheat)
anova(model.lm2)
model.lme <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~1),
pdIdent(~Block - 1),
pdIdent(~Genotype - 1)))),
data=WinterWheat)
VarCorr(model.lme)
#Correlations
library(reshape)
covMat <- cov(cast(Year ~ Genotype, data = WinterWheatM, value = "Yield", fun = mean))
covMat*lower.tri(covMat, diag=T)
init <- c()
# WinterWheat$Year <- factor(WinterWheat$Year)
WinterWheat$GE <- factor(WinterWheat$Genotype:WinterWheat$Year)
WinterWheat$BE <- factor(WinterWheat$Block:WinterWheat$Year)
model.mix <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Block - 1),
pdIdent(~Genotype - 1)))),
data=WinterWheat)
VarCorr(model.mixB)
model.mixB <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Block - 1),
pdIdent(~Genotype - 1)))),
data=WinterWheat)
VarCorr(model.mixB)
model.mixC <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Genotype - 1),
pdIdent(~Block - 1)))),
data=WinterWheat)
VarCorr(model.mixC)
WinterWheat$One <- 1L
model.mixD <- lme(Yield ~ Genotype,
random=list(One = pdIdent(~GE - 1),
One = pdIdent(~GE - 1)),
data=WinterWheat)
VarCorr(model.mixD)
model.mixD <- lme(Yield ~ Genotype,
random=list(One = pdIdent(~GE - 1),
One = pdIdent(~BE - 1)),
data=WinterWheat)
VarCorr(model.mixD)
model.mixE <- lme(Yield ~ Genotype,
random=list(Year = pdIdent(~Genotype - 1),
Year = pdIdent(~Block - 1)),
data=WinterWheat)
VarCorr(model.mixE)
VarCorr(model.lme)
VarCorr(model.mixD)
EnvVarMod <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Block - 1),
pdSymm(~Genotype - 1)))),
data=WinterWheat)
model.mixB <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Block - 1),
pdIdent(~Genotype - 1)))),
data=WinterWheat)
VarCorr(model.mixB)
EnvVarMod <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Block - 1),
pdSymm(~Genotype - 1)))),
data=WinterWheat)
VarCorr(EnvVarMod)
WinterWheat <- WinterWheat[WinterWheat$Genotype == "COLOSSEO" | WinterWheat$Genotype == "CRESO" | WinterWheat$Genotype == "DUILIO",]
head(WinterWheat)
WinterWheat$Genotype <- factor(WinterWheat$Genotype)
WinterWheat$Block <- factor(WinterWheat$Block)
WinterWheat$Year <- factor(WinterWheat$Year)
model.lm <- lm(Yield ~ Genotype*Year + Year/Block,
data=WinterWheat)
anova(model.lm)
model.lm2 <- lm(Yield ~ Genotype + Year:Block + Genotype:Year,
data=WinterWheat)
anova(model.lm2)
model.lme <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~1),
pdIdent(~Block - 1),
pdIdent(~Genotype - 1)))),
data=WinterWheat)
VarCorr(model.lme)
# WinterWheat$Year <- factor(WinterWheat$Year)
WinterWheat$GE <- factor(WinterWheat$Genotype:WinterWheat$Year)
WinterWheat$BE <- factor(WinterWheat$Block:WinterWheat$Year)
WinterWheat$One <- 1L
model.mixB <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Block - 1),
pdIdent(~Genotype - 1)))),
data=WinterWheat)
VarCorr(model.mixB)
model.mixC <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Genotype - 1),
pdIdent(~Block - 1)))),
data=WinterWheat)
VarCorr(model.mixC)
model.mixD <- lme(Yield ~ Genotype,
random=list(One = pdIdent(~GE - 1),
One = pdIdent(~BE - 1)),
data=WinterWheat)
VarCorr(model.mixD)
model.mixE <- lme(Yield ~ Genotype,
random=list(Year = pdIdent(~Genotype - 1),
Year = pdIdent(~Block - 1)),
data=WinterWheat)
VarCorr(model.mixE)
EnvVarMod <- lme(Yield ~ Genotype,
random=list(Year = pdBlocked(list(pdIdent(~Block - 1),
pdSymm(~Genotype - 1)))),
data=WinterWheat)
VarCorr(EnvVarMod)
EnvVarModB <- lme(Yield ~ Genotype,
random=list(Year = pdSymm(~Genotype - 1),
Year = pdIdent(~Block - 1)),
data=WinterWheat)
VarCorr(EnvVarModB)
numGen <- length(levels(WinterWheat$Genotype))
envVar <- as.numeric ( VarCorr(EnvVarMod)[4:(3+numGen),1] )
envVar
envVarNaive <- c(0.5264201, 0.7450292, 2.4191667)
envVarNaive - envVar
0.1242064/3 + 0.0707718/3
0.1242064/3 + 0.0707718/4
mean(envVarNaive)
envVarNaive - envVar
mean(envVarNaive - envVar
)
getVarCov(EnvVarMod, type = "marginal")
VarCorr(EnvVarModB)
envVar + 0.07077176
envVar + 0.07077176 + 0.12420641
getVarCov(EnvVarMod)[4:6,4:6]
getVarCov(EnvVarMod)[4:6,4:6] + 0.1242064/3
0.1242064/3 + 0.0707718/3
getVarCov(EnvVarMod)[4:6,4:6] + 0.1242064/3 + 0.0707718/3
getVarCov(EnvVarMod)[4:6,4:6] + 0.0707718/3
library(aomisc)
library(aomisc)
plotnls <- function(fm, ...) UseMethod("plotnls")
plot
plot.default
#plotnls <- function(fm, ...) UseMethod("plotnls")
plotnls <- function(fm, type = "means", ...) {
if (!inherits(fm, "nls"))
stop("use only with \"nls\" objects")
## Determine the names of the x and y variables in a fitted model
vnm <- function(fm)
{
mm <- fm$m
cc <- fm$call
pnms <- names(mm$getPars())
form <- cc$formula
rhsnms <- all.vars(form[[3]])
vnms <- rhsnms[!(rhsnms %in% pnms)]
if (length(vnms) > 1)
stop("plotnls not yet implemented for >1 covariate")
list(x = as.name(vnms), y = form[[2]])
}
## Create the predictor function from a fitted model
pfun <- function(fm)
{
vnmx <- as.character(vnm(fm)$x)
function(x) {
ll <- list(x)
names(ll) <- vnmx
predict(fm, ll)
}
}
predfun <- pfun(fm)
lattice::xyplot(eval(substitute(y ~ x, vnm(fm))), fm$m$getEnv(),
panel = function(x, y, ...) {
panel.grid(h = -1, v = -1)
if(type == "means"){
y <- tapply(y, list(factor(x)), mean)
x <- tapply(x, list(factor(x)), mean)
#panel.points(x, y, ...)
}
panel.xyplot(x, y, col="red", type="p", cex = 1.2)
panel.curve(predfun, ...)
}, ...)
}
# plotfit.list <- function(fm, ...)
# {
#     if (!all(unlist(lapply(fm, inherits, "nls"))))
#         stop("plotfit of a list must be a list of nls models")
#     nms <- names(fm)
#     pfuns <- lapply(fm, pfun)
#     xyplot(eval(substitute(y ~ x, vnm(fm[[1]]))), fm[[1]]$m$getEnv(),
#            panel = function(x, y, ...) {
#                panel.grid(h = -1, v = -1)
#                panel.points(x, y, ...)
#                dots <- list(...)
#                lims <- current.panel.limits()$x
#                if (!is.null(dots$from)) lims[1] <- as.numeric(dots$from)[1]
#                if (!is.null(dots$to)) lims[2] <- as.numeric(dots$to)[1]
#                n <- 101
#                if (!is.null(dots$n)) n <- as.integer(max(2, dots$n[1]))
#                xv <- seq(lims[1], lims[2], len = n)
#                ln <- trellis.par.get("superpose.line")
#                for (i in seq_along(pfuns))
#                    llines(xv, pfuns[[i]](xv), col = ln$col[i],
#                           lty = ln$lty[i], lwd = ln$lwd[i])
#            }, ...)
# }
library(aomisc)
data(degradation)
head(degradation, 10)
# Chunk 1
library(aomisc)
data(degradation)
head(degradation, 10)
# Chunk 2: figName151
plot(Conc ~ Time, data=degradation)
# Chunk 3
mod <- lm(log(Conc) ~ Time, data=degradation)
summary(mod)
# Chunk 4: figname142
par(mfrow = c(1,2))
plot(mod, which = 1)
plot(mod, which = 2)
# Chunk 5
mod2 <- lm(Conc ~ Time + I(Time^2), data=degradation)
pred <- predict(mod2, newdata = data.frame(Time = seq(0, 70, by = 0.1)))
plot(Conc ~ Time, data=degradation)
lines(pred ~ seq(0, 70, by = 0.1), col = "red")
# Chunk 6
modNlin <- nls(Conc ~ A*exp(-k*Time),
start=list(A=100, k=0.06),
data=degradation)
summary(modNlin)
par(mfrow=c(1,2))
plot(modNlin, which = 1)
plot(modNlin, which = 2)
plotnls(modNlin)
library(lattice)
plotnls(modNlin)
modAov <- lm(Conc ~ factor(Time), data=degradation)
anova(modAov)
SSa <- anova(modAov)[2,2]
SSa
R2nls(modNlin)
modNlin2 <- boxcox(modNlin, plotit = T)
modNlin2 <- boxcox(modNlin)
bcSummary(modNlin2)
library(aomisc)
modNlin2 <- boxcox(modNlin)
bcGetLambda(modNlin2)
bcGetLambda(modNlin)
summary(modLin2)
summary(modNlin2)
modNlin3 <- boxcox(modNlin, lambda = 0.5)
modNlin2 <- boxcox(modNlin)
library(aomisc)
modNlin2 <- boxcox(modNlin)
bcGetLambda(modNlin2)
summary(modNlin2)
modNlin3 <- boxcox(modNlin, lambda = 0.5)
bcGetLambda(modNlin3)
summary(modNlin3)
modNlin <- nls(Conc ~ A*exp(-k*Time),
start=list(A=100, k=0.05),
data=degradation)
summary(modNlin)
par(mfrow=c(1,2))
plot(modNlin, which = 1)
plot(modNlin, which = 2)
library(lattice)
plotnls(modNlin)
R2nls(modNlin)
library(bookdown)
