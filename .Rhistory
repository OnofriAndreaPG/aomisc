#b is negative
X <- c(1,2,4,5,7,12)
a <- 2; b <- -0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is positive
set.seed(1234)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is positive
set.seed(5678)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is negative
X <- c(1,2,4,5,7,12)
a <- 2; b <- -0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is positive
set.seed(5678)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
?MM.2
#b is negative
X <- c(1,2,4,5,7,12)
a <- 2; b <- -0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
model <- drm(Y ~ X, fct = DRC.logCurve(fixed=c(0, NA)) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
model <- drm(Y ~ X, fct = DRC.logCurve(fixed=c(0, NA)) )
summary(model)
plot(model, log="")
#b is positive
set.seed(5678)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
model <- drm(Y ~ X, fct = DRC.logCurve(fixed=c(0, NA)) )
summary(model)
plot(model, log="")
D(expression( ( (a*X) / (b + X) ), "X")
D(expression( (a*X) / (b + X) , "X")
D(expression( (a*X) / (b + X) ), "X")
library(nlme)
data(product)
data(methionine)
methionine
a <- 15; b <- 2.5
Ye <- SSmicmen(X, a, b)
Ye
Ye <- as,numeric( SSmicmen(X, a, b) )
Ye <- as.numeric( SSmicmen(X, a, b) )
Ye
res <- rnorm(8, 0, 1.2)
Y <- Ye + res
model <- nls(Y ~ SSmicmen(X, a, b))
X
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 2.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 1.2)
Y <- Ye + res
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
library(aomisc)
library(drc)
library(nlme)
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 2.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 1.2)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model)
plot(model, log="")
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 1.2)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model, log="")
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 0.2)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model, log="")
set.seed(1234)
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 0.1)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model, log="")
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model, log="")
#drm fit
model <- drm(Y ~ X, fct = MM.2())
summary(model)
#drm fit
model <- drm(Y ~ X, fct = MM.3())
summary(model)
plot(model, log="")
Y <- Y + 10
#drm fit
model <- drm(Y ~ X, fct = MM.3())
summary(model)
plot(model, log="")
set.seed(1234)
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 0.1)
Y <- Ye + res
Y1 <- Y + 30
#drm fit
model <- drm(Y ~ X, fct = MM.3())
#drm fit
model <- drm(Y1 ~ X, fct = MM.3())
summary(model)
plot(model, log="")
plot(model, log="", xlim=c(0,45))
plot(model, log="", ylim=c(0,45))
data(competition)
competition
mean(competition$Yield[competition$Dens == 0])
WeedFreeYield <- mean(competition$Yield[competition$Dens == 0]
competition$YL <- competition$Yield / )
WeedFreeYield <- mean( competition$Yield[competition$Dens == 0] )
data(competition)
WeedFreeYield <- mean( competition$Yield[competition$Dens == 0] )
competition$YL <- competition$Yield / WeedFreeYield * 100
library(aomisc)
library(drc)
model <- nls(YL ~ NLS.YL(Dens, a, i), data = competition)
summary(model)
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
"DRC.YL" <- function(fixed = c(NA, NA), names = c("i", "A")) {
## Checking arguments
numParm <- 2
if (!is.character(names) | !(length(names) == numParm)) {stop("Not correct 'names' argument")}
if (!(length(fixed) == numParm)) {stop("Not correct 'fixed' argument")}
## Fixing parameters (using argument 'fixed')
notFixed <- is.na(fixed)
parmVec <- rep(0, numParm)
parmVec[!notFixed] <- fixed[!notFixed]
## Defining the non-linear function
fct <- function(x, parm) {
parmMat <- matrix(parmVec, nrow(parm), numParm, byrow = TRUE)
parmMat[, notFixed] <- parm
i <- parmMat[, 1]; A <- parmMat[, 2]
YL.fun(x, i, A)
}
## Defining self starter function
ssfct <- function(dataf) {
x <- dataf[, 1]
y <- dataf[, 2]
#regression on pseudo y values
pseudoY <- 1 /  y[x > 0]
pseudoX <- 1 / x [x > 0]
coefs <- coef( lm(pseudoY ~ pseudoX) )
A <- 1 / coefs[1]; i <- 1 / coefs[2]
return(c(i, A)[notFixed])
}
## Defining names
pnames <- names[notFixed]
## Defining derivatives
## Defining the ED function
## Defining the inverse function
## Defining descriptive text
text <- "Yield-Loss function (Cousens, 1985)"
## Returning the function with self starter and names
returnList <- list(fct = fct, ssfct = ssfct, names = pnames, text = text, noParm = sum(is.na(fixed)))
class(returnList) <- "drcMean"
invisible(returnList)
}
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
summary(model)
plot(model)
plot(model, log="")
competition$YL
data(competition)
WeedFreeYield <- mean( competition$Yield[competition$Dens == 0] )
WeedFreeYield
competition$YL <- competition$Yield / WeedFreeYield * 100
competition$YL
competition$Yield
competition$YL <- (competition$Yield / WeedFreeYield) * 100
competition$YL
competition$Yield / WeedFreeYield
competition$YL <- (competition$Yield / WeedFreeYield) * 100
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
summary(model)
plot(model, log="")
plot(YL ~ Dens, data = competition)
data(competition)
Ywf <- mean( competition$Yield[competition$Dens == 0] )
Ywf <- mean( competition$Yield[competition$Dens == 0] )
competition$YL <- ( Ywf - competition$Yield ) / Ywf * 100
plot(YL ~ Dens, data = competition)
model <- nls(YL ~ NLS.YL(Dens, a, i), data = competition)
summary(model)
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
summary(model)
plot(model, log="")
library(aomisc)
model <- drm(Yield ~ Dens, fct = DRC.cousens85(),
data = competition)
summary(model)
plot(model, log="")
data(beetGrowth)
beetGrowth
load("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/aomisc/data/beetGrowth.rda")
beetGrowth
ls()
beetGrowth <- beet
save(beetGrowth, file = "beetGrowth.rda")
library(aomisc)
data(beetGrowth)
beetGrowth
model <- drm(weightFree ~ DAE, fct = L.3, data = beetGrowth)
model <- drm(weightFree ~ DAE, fct = L.3(), data = beetGrowth)
summary(model)
plot(model, log="")
model <- drm(I(weightFree/30) ~ DAE, fct = L.2(), data = beetGrowth)
#Logistic curve with two-parameters
"L.2" <-
function(fixed = c(NA, NA), names = c("b", "e"), ...)
#Logistic curve with two-parameters
"L.2" <-
function(fixed = c(NA, NA), names = c("b", "e"), ...)
{
## Checking arguments
numParm <- 2
if (!is.character(names) | !(length(names)==numParm)) {stop("Not correct names argument")}
if (!(length(fixed)==numParm)) {stop("Not correct length of 'fixed' argument")}
return(logistic(fixed = c(fixed[1], 0, 1, fixed[2], 1), names = c(names[1], "c", "d", names[2], "f"),
fctName = as.character(match.call()[[1]]),
fctText = "Logistic (ED50 as parameter) with lower limit fixed at 0 and upper limit fixed to 1", ...))
}
model <- drm(I(weightFree/30) ~ DAE, fct = L.2(), data = beetGrowth)
"L.2" <-
function(fixed = c(NA, NA), names = c("b", "e"), ...)
{
## Checking arguments
numParm <- 2
if (!is.character(names) | !(length(names)==numParm)) {stop("Not correct names argument")}
if (!(length(fixed)==numParm)) {stop("Not correct length of 'fixed' argument")}
return(logistic(fixed = c(fixed[1], 0, 1, fixed[2], 1), names = c(names[1], "c", "d", names[2], "f"),
fctName = as.character(match.call()[[1]]),
fctText = "Logistic (ED50 as parameter) with lower limit fixed at 0 and upper limit fixed to 1", ...))
}
model <- drm(I(weightFree/30) ~ DAE, fct = L.2(), data = beetGrowth)
summary(model)
model <- drm(I(weightFree/30) ~ DAE, fct = L.2(), data = beetGrowth)
summary(model)
plot(model, log="")
model2 <- drm(weightFree ~ DAE, fct = G.3(), data = beetGrowth)
summary(model2)
plot(model, log="")
plot(model2, add=T)
data(beetGrowth)
beetGrowth
model <- drm(weightFree ~ DAE, fct = L.3(), data = beetGrowth)
summary(model)
plot(model, log="")
model2 <- drm(weightFree ~ DAE, fct = G.3(), data = beetGrowth)
summary(model2)
plot(model, log="")
plot(model2, add=T)
model2 <- drm(weightFree ~ DAE, fct = G.3(), data = beetGrowth)
summary(model2)
plot(model, log="")
plot(model2, add=T, col="red")
library(aomisc)
D(expression(a + b*X + c*X^2), "X")
?EXD.3
data(degradation)
degradation
library(aomisc)
data(degradation)
degradation
model <- drm(Conc ~ Time, fct = NLS.expoDecay()
data = degradation)
model <- drm(Conc ~ Time, fct = NLS.expoDecay(),
data = degradation)
library(drc)
model <- drm(Conc ~ Time, fct = NLS.expoDecay(),
data = degradation)
model <- drm(Conc ~ Time, fct = DRC.expoDecay(),
data = degradation)
library(aomisc)
model <- drm(Conc ~ Time, fct = DRC.expoDecay(),
data = degradation)
library(aomisc)
data(degradation)
degradation
model <- drm(Conc ~ Time, fct = DRC.expoDecay(),
data = degradation)
summary(model)
plot(model)
plot(model, log="")
library(aomisc)
data(brassica)
brassica
data(beetGrowth)
View(beetGrowth)
model <- drm(weightFree ~ DAE, fct = DRC.asymReg,
data = beetGrowth)
model <- drm(weightFree ~ DAE, fct = DRC.asymReg(),
data = beetGrowth)
plot(model, log="")
asymReg.fun
a <- 20; b <- 5; c <- 0.5
Ye <- asymReg.fun(X, a, b, c)
X <- c(1, 3, 5, 7, 9, 11, 13, 20)
a <- 20; b <- 5; c <- 0.5
Ye <- asymReg.fun(X, a, b, c)
epsilon <- rnorm(8, 0, 0.5)
Y <- Ye + epsilon
set.seed(1234)
X <- c(1, 3, 5, 7, 9, 11, 13, 20)
a <- 20; b <- 5; c <- 0.5
Ye <- asymReg.fun(X, a, b, c)
epsilon <- rnorm(8, 0, 0.5)
Y <- Ye + epsilon
model <- drm(Y ~ X, fct = DRC.asymReg(),
data = beetGrowth)
plot(model, log="")
set.seed(1234)
X <- c(1, 3, 5, 7, 9, 11, 13, 20)
a <- 20; b <- 5; c <- 0.3
Ye <- asymReg.fun(X, a, b, c)
epsilon <- rnorm(8, 0, 0.5)
Y <- Ye + epsilon
model <- drm(Y ~ X, fct = DRC.asymReg(),
data = beetGrowth)
plot(model, log="")
data(speciesArea)
speciesArea
model <- drm(numSpecies ~ Area, fct = DRC.powerCurve(),
data = speciesArea)
summary(model)
plot(model, log="")
curve(powerCurve.fun(x, coef(model)[1], -coef(model)[2]),
xlab = "X", ylab = "Y")
curve(powerCurve.fun(x, coef(model)[1], 2),
xlab = "X", ylab = "Y")
#b is positive
set.seed(5678)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is negative
X <- c(1,2,4,5,7,12)
a <- 2; b <- -0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
set.seed(1234)
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 0.1)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = MM.2())
summary(model)
plot(model, log="")
data(competition)
Ywf <- mean( competition$Yield[competition$Dens == 0] )
competition$YL <- ( Ywf - competition$Yield ) / Ywf * 100
model <- nls(YL ~ NLS.YL(Dens, a, i), data = competition)
summary(model)
#nls fit
model <- nls(YL ~ NLS.YL(Dens, a, i), data = competition)
summary(model)
#drc fit
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
summary(model)
plot(model, log="")
model <- drm(Yield ~ Dens, fct = DRC.cousens85(),
data = competition)
summary(model)
plot(model, log="")
data(beetGrowth)
beetGrowth
model <- drm(weightFree ~ DAE, fct = L.3(), data = beetGrowth)
summary(model)
plot(model, log="")
d <- 10; c <- 2; e <- 7; b <- 0.5
curve( G.fun(x, b, c, d, e), xlim = c(0, 20) )
G.fun
d <- 10; c <- 2; e <- 7; b <- 0.5
curve( G.fun(x, b, c, d, e), xlim = c(0, 20) )
G.fun <- function(X, b, c, d, e) {
c + (d - c) * (exp (- exp ( b * ( X - e))))
}
curve( G.fun(x, b, c, d, e), xlim = c(0, 20) )
d <- 10; c <- 2; e <- 7; b <- - 0.5
curve( G.fun(x, b, c, d, e), xlim = c(0, 20) )
curve( L.fun(x, b, c, d, e), add = T, col = "red" )
curve( G.fun(x, b, c, d, e), xlim = c(0, 20) , xlab="X", ylab = "Y")
curve( L.fun(x, b, c, d, e), add = T, col = "red" )
curve( G.fun(x, b, c, d, e), xlim = c(0, 20) , xlab="X", ylab = "Y")
curve( L.fun(x, b, c, d, e), add = T, col = "red" )
curve( E.fun(x, b, c, d, e), add = T, col = "blue" )
E.fun <- function(X, b, c, d, e) {
c + (d - c) * (1 - exp( - exp ( - b * ( X - e))))
}
curve( E.fun(x, b, c, d, e), add = T, col = "blue" )
data(sunflower)
sunflower
View(brassica)
View(brassica)
model <- drm(FW ~ Dose, fct = LL.4(), data = brassica)
summary(model)
plot(model)
plot(model2, add=T, col = "red")
model <- drm(FW ~ Dose, fct = W2.4(), data = brassica)
model2 <- drm(FW ~ Dose, fct = W1.4(), data = brassica)
plot(model)
plot(model2, add=T, col = "red")
library(aomisc)
