points(Medie$Mean ~ Medie$Tempo, subset=c(Medie$Tesi=="MP"),
pch=3, type="b")
points(Medie$Mean ~ Medie$Tempo, subset=c(Medie$Tesi=="MPC"),
pch=4, type="b")
legend(0,4, legend=c("M", "MC", "MP", "MPC"), pch=1:4, bty="n")
metamitron$logConc <- log(metamitron$Conc)
Medie <- plyr::ddply(metamitron, c("Tesi", "Tempo"),
function(df) c(Mean=mean(df$logConc)))
plot(Medie$Mean ~ Medie$Tempo, subset=c(Medie$Tesi=="M"),
ylim=c(2,5), xlab="Time", ylab="Concentration") #,type="b")
points(Medie$Mean ~ Medie$Tempo, subset=c(Medie$Tesi=="MC"),
pch=2)#, type="b")
points(Medie$Mean ~ Medie$Tempo, subset=c(Medie$Tesi=="MP"),
pch=3)#, type="b")
points(Medie$Mean ~ Medie$Tempo, subset=c(Medie$Tesi=="MPC"),
pch=4)#, type="b")
abline(a=coef(model.1)[1], b=coef(model.1)[4], lty=1)
model.1 <- lm(log(Conc) ~ Tesi  / Tempo - 1, data=metamitron)
summary(model.1)
abline(a=coef(model.1)[1], b=coef(model.1)[4], lty=1)
abline(a=coef(model.1)[1], b=coef(model.1)[5], lty=1)
abline(a=coef(model.1)[1], b=coef(model.1)[5], lty=1)
abline(a=coef(model.1)[2], b=coef(model.1)[6], lty=2)
abline(a=coef(model.1)[3], b=coef(model.1)[7], lty=3)
abline(a=coef(model.1)[4], b=coef(model.1)[8], lty=4)
anova(model, model.1)
rm(list=ls())
# Chunk 1: setup
#Put at the beginning
knitr::knit_hooks$set(document = function(x){
gsub("```\n*```r*\n*", "", x)
})
#devtools::install_github("OnofriAndreaPG/aomisc")
# Chunk 2
library(aomisc)
data(metamitron)
head(metamitron)
# Chunk 3
model <- lm(log(Conc) ~ factor(Tempo)*Tesi, data=metamitron)
anova(model)
# Chunk 4
par(mfrow=c(2,2))
plot(model)
bartlett.test(log(Conc) ~ I(Tesi:factor(Tempo)), data=metamitron)
car::leveneTest(log(Conc) ~ I(Tesi:factor(Tempo)), data=metamitron)
shapiro.test(residuals(model))
# Chunk 5
model.1 <- lm(log(Conc) ~ Tesi  / Tempo - 1, data=metamitron)
summary(model.1)
anova(model, model.1)
model.2 <- lm(log(Conc) ~ Tesi + Tempo - 1, data = CO2)
model.2 <- lm(log(Conc) ~ Tesi + Tempo - 1, data = metamitron)
summary(model.2)
install.packages("/Volumes/SUNDISK/aomisc_0.22.tar.gz", repos = NULL, type = "source")
library(aomisc)
data(metamitron)
metamitron
load("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/aomisc/data/johnsongrass.rda")
data("johnsongrass")
ls()
library(aomisc)
data("johnsongrass")
ls()
library(aomisc)
library(aomisc)
library(aomisc)
data(johnsongrass)
data(johnsongrass)
library(aomisc)
data(johnsongrass)
View(johnsongrass)
mod1 <- lm(RizomeWeight ~ Length * Timing, data=johnsongrass)
anova(mod1)
mod2 <- lm(RizomeWeight ~ Length : Timing, data=johnsongrass)
anova(mod2)
library(aomisc)
library(drc)
?drm
read.table(pipe("pbpaste"), header=T)
speciesArea <- read.table(pipe("pbpaste"), header=T, row.names=F)
speciesArea
?read.table
speciesArea <- read.table(pipe("pbpaste"), header=T)
speciesArea
setwd("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/aomisc")
save(speciesArea, file="speciesArea.rda")
library(aomisc)
library(aomisc)
library(aomisc)
library(aomisc)
data(speciesArea)
speciesArea
row.names(speciesArea)
colnames(speciesArea)
colnames(speciesArea)[2] <- "numSpecies"
speciesArea
save(speciesArea, file = "speciesArea.rda")
library(aomisc)
data(speciesArea)
speciesArea
model <- drm(numSpecies ~ Area, fct = DRC.powerCurve(),
data = speciesArea)
summary(model)
plot(model)
plot(model, log="")
View(speciesArea)
speciesArea[2,9]
speciesArea[9,2]
speciesArea[9,2] <- 26
save(speciesArea, file = "speciesArea.rda")
library(aomisc)
data(speciesArea)
speciesArea
model <- drm(numSpecies ~ Area, fct = DRC.powerCurve(),
data = speciesArea)
summary(model)
plot(model, log="")
curve(powerCurve.fun(x, coef(model)[1], -coef(model)[2]))
curve(powerCurve.fun(x, coef(model)[1], 2))
curve(powerCurve.fun(x, coef(model)[1], -coef(model)[2]),
xlab = "X", ylab = "Y")
curve(powerCurve.fun(x, coef(model)[1], 2),
xlab = "X", ylab = "Y")
plot(model, log="")
plot(model, log="")
summary(model)
D(expression(a * X^b), "X")
X <- c(11,2,4,5,7,12)
a<-2;b<- 0.5
X <- c(11,2,4,5,7,12)
a<-2;b<- 0.5
Ye <-  a + b*log(X)
Y <- rnorm(1, Ye, 0.1)
Y
Y <- rnorm(6, Ye, 0.1)
Y
model <- lm(Y ~ log(X) )
summary(model)
library(aomisc)
X <- c(11,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
Y <- rnorm(6, Ye, 0.1)
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
Y
X <- c(11,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
Ye
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is negative
X <- c(1,2,4,5,7,12)
a <- 2; b <- -0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is positive
set.seed(1234)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is positive
set.seed(5678)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is negative
X <- c(1,2,4,5,7,12)
a <- 2; b <- -0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
#b is positive
set.seed(5678)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
?MM.2
#b is negative
X <- c(1,2,4,5,7,12)
a <- 2; b <- -0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
model <- drm(Y ~ X, fct = DRC.logCurve(fixed=c(0, NA)) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
model <- drm(Y ~ X, fct = DRC.logCurve(fixed=c(0, NA)) )
summary(model)
plot(model, log="")
#b is positive
set.seed(5678)
X <- c(1,2,4,5,7,12)
a<-2; b<- 0.5
Ye <-  a + b*log(X)
res <- rnorm(6, 0, 0.1)
Y <- Ye + res
model <- lm(Y ~ log(X) )
summary(model)
model <- drm(Y ~ X, fct = DRC.logCurve() )
summary(model)
plot(model, log="")
model <- drm(Y ~ X, fct = DRC.logCurve(fixed=c(0, NA)) )
summary(model)
plot(model, log="")
D(expression( ( (a*X) / (b + X) ), "X")
D(expression( (a*X) / (b + X) , "X")
D(expression( (a*X) / (b + X) ), "X")
library(nlme)
data(product)
data(methionine)
methionine
a <- 15; b <- 2.5
Ye <- SSmicmen(X, a, b)
Ye
Ye <- as,numeric( SSmicmen(X, a, b) )
Ye <- as.numeric( SSmicmen(X, a, b) )
Ye
res <- rnorm(8, 0, 1.2)
Y <- Ye + res
model <- nls(Y ~ SSmicmen(X, a, b))
X
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 2.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 1.2)
Y <- Ye + res
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
library(aomisc)
library(drc)
library(nlme)
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 2.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 1.2)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model)
plot(model, log="")
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 1.2)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model, log="")
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 0.2)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model, log="")
set.seed(1234)
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 0.1)
Y <- Ye + res
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model, log="")
#nls fit
model <- nls(Y ~ SSmicmen(X, a, b))
summary(model)
#drm fit
model <- drm(Y ~ X, fct = DRC.micmen())
summary(model)
plot(model, log="")
#drm fit
model <- drm(Y ~ X, fct = MM.2())
summary(model)
#drm fit
model <- drm(Y ~ X, fct = MM.3())
summary(model)
plot(model, log="")
Y <- Y + 10
#drm fit
model <- drm(Y ~ X, fct = MM.3())
summary(model)
plot(model, log="")
set.seed(1234)
X <- c(3, 5, 7, 22, 28, 39, 46, 200)
a <- 15; b <- 0.5
Ye <- as.numeric( SSmicmen(X, a, b) )
res <- rnorm(8, 0, 0.1)
Y <- Ye + res
Y1 <- Y + 30
#drm fit
model <- drm(Y ~ X, fct = MM.3())
#drm fit
model <- drm(Y1 ~ X, fct = MM.3())
summary(model)
plot(model, log="")
plot(model, log="", xlim=c(0,45))
plot(model, log="", ylim=c(0,45))
data(competition)
competition
mean(competition$Yield[competition$Dens == 0])
WeedFreeYield <- mean(competition$Yield[competition$Dens == 0]
competition$YL <- competition$Yield / )
WeedFreeYield <- mean( competition$Yield[competition$Dens == 0] )
data(competition)
WeedFreeYield <- mean( competition$Yield[competition$Dens == 0] )
competition$YL <- competition$Yield / WeedFreeYield * 100
library(aomisc)
library(drc)
model <- nls(YL ~ NLS.YL(Dens, a, i), data = competition)
summary(model)
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
"DRC.YL" <- function(fixed = c(NA, NA), names = c("i", "A")) {
## Checking arguments
numParm <- 2
if (!is.character(names) | !(length(names) == numParm)) {stop("Not correct 'names' argument")}
if (!(length(fixed) == numParm)) {stop("Not correct 'fixed' argument")}
## Fixing parameters (using argument 'fixed')
notFixed <- is.na(fixed)
parmVec <- rep(0, numParm)
parmVec[!notFixed] <- fixed[!notFixed]
## Defining the non-linear function
fct <- function(x, parm) {
parmMat <- matrix(parmVec, nrow(parm), numParm, byrow = TRUE)
parmMat[, notFixed] <- parm
i <- parmMat[, 1]; A <- parmMat[, 2]
YL.fun(x, i, A)
}
## Defining self starter function
ssfct <- function(dataf) {
x <- dataf[, 1]
y <- dataf[, 2]
#regression on pseudo y values
pseudoY <- 1 /  y[x > 0]
pseudoX <- 1 / x [x > 0]
coefs <- coef( lm(pseudoY ~ pseudoX) )
A <- 1 / coefs[1]; i <- 1 / coefs[2]
return(c(i, A)[notFixed])
}
## Defining names
pnames <- names[notFixed]
## Defining derivatives
## Defining the ED function
## Defining the inverse function
## Defining descriptive text
text <- "Yield-Loss function (Cousens, 1985)"
## Returning the function with self starter and names
returnList <- list(fct = fct, ssfct = ssfct, names = pnames, text = text, noParm = sum(is.na(fixed)))
class(returnList) <- "drcMean"
invisible(returnList)
}
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
summary(model)
plot(model)
plot(model, log="")
competition$YL
data(competition)
WeedFreeYield <- mean( competition$Yield[competition$Dens == 0] )
WeedFreeYield
competition$YL <- competition$Yield / WeedFreeYield * 100
competition$YL
competition$Yield
competition$YL <- (competition$Yield / WeedFreeYield) * 100
competition$YL
competition$Yield / WeedFreeYield
competition$YL <- (competition$Yield / WeedFreeYield) * 100
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
summary(model)
plot(model, log="")
plot(YL ~ Dens, data = competition)
data(competition)
Ywf <- mean( competition$Yield[competition$Dens == 0] )
Ywf <- mean( competition$Yield[competition$Dens == 0] )
competition$YL <- ( Ywf - competition$Yield ) / Ywf * 100
plot(YL ~ Dens, data = competition)
model <- nls(YL ~ NLS.YL(Dens, a, i), data = competition)
summary(model)
model <- drm(YL ~ Dens, fct = DRC.YL(), data = competition)
summary(model)
plot(model, log="")
library(aomisc)
model <- drm(Yield ~ Dens, fct = DRC.cousens85(),
data = competition)
summary(model)
plot(model, log="")
data(beetGrowth)
beetGrowth
load("~/Documents/_DBXAndrea/Dropbox/_Lavoro/MyUtilities/RPackages/aomisc/data/beetGrowth.rda")
beetGrowth
ls()
beetGrowth <- beet
save(beetGrowth, file = "beetGrowth.rda")
library(aomisc)
data(beetGrowth)
beetGrowth
model <- drm(weightFree ~ DAE, fct = L.3, data = beetGrowth)
model <- drm(weightFree ~ DAE, fct = L.3(), data = beetGrowth)
summary(model)
plot(model, log="")
model <- drm(I(weightFree/30) ~ DAE, fct = L.2(), data = beetGrowth)
#Logistic curve with two-parameters
"L.2" <-
function(fixed = c(NA, NA), names = c("b", "e"), ...)
#Logistic curve with two-parameters
"L.2" <-
function(fixed = c(NA, NA), names = c("b", "e"), ...)
{
## Checking arguments
numParm <- 2
if (!is.character(names) | !(length(names)==numParm)) {stop("Not correct names argument")}
if (!(length(fixed)==numParm)) {stop("Not correct length of 'fixed' argument")}
return(logistic(fixed = c(fixed[1], 0, 1, fixed[2], 1), names = c(names[1], "c", "d", names[2], "f"),
fctName = as.character(match.call()[[1]]),
fctText = "Logistic (ED50 as parameter) with lower limit fixed at 0 and upper limit fixed to 1", ...))
}
model <- drm(I(weightFree/30) ~ DAE, fct = L.2(), data = beetGrowth)
"L.2" <-
function(fixed = c(NA, NA), names = c("b", "e"), ...)
{
## Checking arguments
numParm <- 2
if (!is.character(names) | !(length(names)==numParm)) {stop("Not correct names argument")}
if (!(length(fixed)==numParm)) {stop("Not correct length of 'fixed' argument")}
return(logistic(fixed = c(fixed[1], 0, 1, fixed[2], 1), names = c(names[1], "c", "d", names[2], "f"),
fctName = as.character(match.call()[[1]]),
fctText = "Logistic (ED50 as parameter) with lower limit fixed at 0 and upper limit fixed to 1", ...))
}
model <- drm(I(weightFree/30) ~ DAE, fct = L.2(), data = beetGrowth)
summary(model)
model <- drm(I(weightFree/30) ~ DAE, fct = L.2(), data = beetGrowth)
summary(model)
plot(model, log="")
model2 <- drm(weightFree ~ DAE, fct = G.3(), data = beetGrowth)
summary(model2)
plot(model, log="")
plot(model2, add=T)
data(beetGrowth)
beetGrowth
model <- drm(weightFree ~ DAE, fct = L.3(), data = beetGrowth)
summary(model)
plot(model, log="")
model2 <- drm(weightFree ~ DAE, fct = G.3(), data = beetGrowth)
summary(model2)
plot(model, log="")
plot(model2, add=T)
model2 <- drm(weightFree ~ DAE, fct = G.3(), data = beetGrowth)
summary(model2)
plot(model, log="")
plot(model2, add=T, col="red")
